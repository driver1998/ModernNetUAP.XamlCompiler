using Microsoft.CodeAnalysis;
using System;
using System.IO;
using System.Reflection.Metadata;
using System.Reflection.PortableExecutable;
using System.Text;

namespace TestGenerator
{
    [Generator]
    public class ReverseProjectionGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var assemblyFile = "D:\\NuGet\\.nuget\\packages\\microsoft.windows.sdk.net.ref\\10.0.22621.37-preview\\lib\\net6.0\\Microsoft.Windows.SDK.NET.dll";
            using var fs = new FileStream(assemblyFile, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            using var peReader = new PEReader(fs);

            var mr = peReader.GetMetadataReader();
            var moduleDef = mr.GetModuleDefinition();



            StringBuilder sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("using System.Runtime.CompilerServices;");
            foreach (var typeDefinitionHandle in mr.TypeDefinitions)
            {
                TypeDefinition type = mr.GetTypeDefinition(typeDefinitionHandle);
                var ns = mr.GetString(type.Namespace);
                var typename = mr.GetString(type.Name);
                if ((type.Attributes & System.Reflection.TypeAttributes.Public) == 0)
                {
                    continue;
                }

                var genericParameterHandle = type.GetGenericParameters();

                if (string.IsNullOrEmpty(ns)) continue;
                if (ns.StartsWith("ABI.") ||
                    ns.StartsWith("WinRT.") || ns == "WinRT" ||
                    ns.StartsWith("System.") || ns == "System")
                    continue;

                if (genericParameterHandle.Count > 0)
                {
                    var split = typename.Split('`');
                    var name = split[0] + "<" + "".PadLeft(genericParameterHandle.Count - 1, ',') + ">";
                    sb.AppendLine($"[assembly:TypeForwardedTo(typeof({ns}.{name}))]");
                }
                else
                {
                    sb.AppendLine($"[assembly:TypeForwardedTo(typeof({ns}.{typename}))]");
                }

            }


            context.AddSource("Projection.g.cs", sb.ToString());
        }

        public void Initialize(GeneratorInitializationContext context)
        {
        }
    }
}
