<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- Import XAML compiler -->
	<PropertyGroup>
		<VCInstallDir>Empty</VCInstallDir>
		<SDKIdentifier>Windows</SDKIdentifier>
		<SDKVersion>10.0</SDKVersion>
		<WindowsSdkPath Condition="'$(WindowsSdkPath)'==''">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\$(SDKIdentifier)\v$(SDKVersion)', 'InstallationFolder', null, RegistryView.Registry32, RegistryView.Default))</WindowsSdkPath>
		<WindowsKitsXamlCompilerTargetsPath>$(WindowsSdkPath)bin\$(TargetPlatformVersion)\XamlCompiler\Microsoft.Windows.UI.Xaml.Common.targets</WindowsKitsXamlCompilerTargetsPath>
		<ModernUAPBuildTaskPath>$(MSBuildThisFileDirectory)\..\tasks\DisposableMemory.ModernUAP.BuildTasks.dll</ModernUAPBuildTaskPath>
	</PropertyGroup>
	<Import Project="$(WindowsKitsXamlCompilerTargetsPath)" />
	<Import Condition="'$(OutputType)' == 'Library'" Project="$(MSBuildThisFileDirectory)\Microsoft.WinUI.NET.Markup.Compiler.targets" />
	<Import Project="$(MSBuildThisFileDirectory)MrtCore.PriGen.targets" />

	<UsingTask TaskName="DisposableMemory.ModernUAP.BuildTasks.GenerateFakeWinMD" AssemblyFile="$(ModernUAPBuildTaskPath)"/>
	<UsingTask TaskName="DisposableMemory.ModernUAP.BuildTasks.NativeAotFixup" AssemblyFile="$(ModernUAPBuildTaskPath)"/>

	<!-- .NET 9 does not resolve WPF references when UseWindowsForms=true but UseWPF=false,
	     having WindowsFormsIntegration.dll in this case will result in build error -->
	<Target Name="RemoveWindowsFormsIntegrationOnNet9"
			Condition="$([MSBuild]::GetTargetFrameworkVersion('$(TargetFramework)')) >= 9 and '$(UseWindowsForms)' == 'true' and '$(UseWPF)' != 'true'"
			BeforeTargets="MarkupCompilePass1">
		<ItemGroup >
			<ReferencePath Remove="@(ReferencePath)"  Condition="'%(Filename)' == 'WindowsFormsIntegration'" />
		</ItemGroup>
	</Target>

	<!-- Generate fake WinMD (which forwards all public WinRT types to Windows SDK projections)
	     then reference it for use in XAML compiler -->
	<Target Name="XamlCompilePass1ReferenceWrap" BeforeTargets="MarkupCompilePass1">
		<PropertyGroup>
			<WindowsSdkProjectionPath Condition="'$(WindowsSdkProjectionPath)'==''">$([MSBuild]::NormalizeDirectory('$(NuGetPackageRoot)', 'Microsoft.Windows.SDK.NET.Ref', '$(WindowsSdkPackageVersion)'))</WindowsSdkProjectionPath>
		</PropertyGroup>

		<PropertyGroup>
			<FakeWinMetadataPath>$(IntermediateOutputPath)Windows.FakeWinMetadata.winmd</FakeWinMetadataPath>
		</PropertyGroup>

		<ItemGroup>
			<ProjectionDllPath Include="$(WindowsSdkProjectionPath)\**\Microsoft.Windows.SDK.NET.dll" />
			<ProjectionDllPath Include="$(WindowsSdkProjectionPath)\**\Microsoft.Windows.UI.Xaml.dll" />
		</ItemGroup>

		<GenerateFakeWinMD SourceProjectionDlls="@(ProjectionDllPath)" TargetWinMD="$(FakeWinMetadataPath)"/>

		<ItemGroup>
			<ReferencePath Include="$(FakeWinMetadataPath)"/>
		</ItemGroup>
	</Target>

	<!-- After XAML compile we can remove the fake WinMD -->
	<Target Name="XamlCompilePass2AfterReferenceWrap" AfterTargets="MarkupCompilePass2">
		<ItemGroup>
			<ReferencePath Remove="$(FakeWinMetadataPath)" />
		</ItemGroup>
	</Target>

	<!-- Apply fixes to XAML compiler generated code and make them AOT-safe -->
	<Target Name="XamlCompilePass2NativeAotFixUp" AfterTargets="XamlCompilePass2AfterReferenceWrap">
		<NativeAotFixUp ObjDirectory="$(IntermediateOutputPath)"></NativeAotFixUp>
	</Target>

</Project>